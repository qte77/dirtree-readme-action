---
# https://docs.github.com/en/actions/sharing-automations/creating-actions/creating-a-docker-container-action
# https://github.com/athul/waka-readme/blob/master/action.yml
name: "TEST-Dirtree-to-Readme"
author: "qte77"
description: "Copy directory tree into file, e.g. README.md, instead of manual effort."
inputs:
  OUT_FILE:
    default: README.md
    type: string
    required: true
  GH_TOKEN:
    default: ${{ github.token }}
    type: string
    required: true
  REPOSITORY:
    default: ${{ github.repository }}
    type: string
    required: true
  COMMITTER_NAME:
    default: 'DirTreeToReadme-GHA'
    type: string
    required: true
  COMMITTER_EMAIL:
    default: 'dirtree@gha'
    type: string
    required: true
  CREATE_PR:
    type: boolean
    default: false
permissions:
  actions: read
  contents: write
  pull-requests: write
runs:
  using: 'composite'
  steps:

    - name: Set env
      shell: bash
      run: |
        echo "APP=src/app.py" >> $GITHUB_ENV
        echo "BRANCH_NEW=dirtree-readme-${{ github.run_number }}-${{ github.ref_name }}" >> $GITHUB_ENV
        echo "OUT_FILE=${{ inputs.OUT_FILE }}" >> $GITHUB_ENV # for app.py
        echo "PY_VER=3.12" >> $GITHUB_ENV
        echo "SCRIPT_PATH=.github/scripts" >> $GITHUB_ENV
        echo "SKIP_PR_HINT=[dirtree to readme gha]" >> $GITHUB_ENV

    - name: Checkout repository
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 1

    - name: Set git cfg and create branch
      shell: bash
      run: |
        git config --local user.name "${{ inputs.COMMITTER_NAME }}"
        git config --local user.email "${{ inputs.COMMITTER_EMAIL }}"
        git checkout -b "${{ env.BRANCH_NEW }}"

    - name: Setup python '${{ env.PY_VER }}'
      uses: actions/setup-python@v5.3.0
      with:
        python-version: ${{ env.PY_VER }}

    - name: Run ${{ env.APP }}
      shell: bash
      run: python -B ${{ env.APP }}

    - name: Check if there are any changes
      id: diff_check_changed
      shell: bash
      run: |
        set +xe
        git add "${{ inputs.OUT_FILE }}"
        git diff --cached --quiet && \
          echo "No changes added. Nothing to do." || \
          echo "changed=true" >> $GITHUB_OUTPUT

    - name: Commit and push changes
      if: ${{ steps.diff_check_changed.outputs.changed == 'true' }}
      shell: bash
      run: |
        git commit -m "Updated '${{ inputs.OUT_FILE }}'"
        git push --set-upstream origin "${{ env.BRANCH_NEW }}"

    - name: "Create PR '${{ env.BRANCH_NEW }}'"
      if: ${{ inputs.CREATE_PR == true &&
        steps.diff_check_changed.outputs.changed == 'true' }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.GH_TOKEN }}
      run: |
          pr_title="PR ${{ env.BRANCH_NEW }} ${{ env.SKIP_PR_HINT }}"
          pr_body="PR automatically created from \`${{ github.ref_name }}\` to update"
          pr_body="${pr_body} the directory tree in \`${{ inputs.OUT_FILE }}\`."

          gh pr create \
            --base "${{ github.ref_name }}" \
            --head "${{ env.BRANCH_NEW }}" \
            --title "${pr_title}" \
            --body "${pr_body}"

    - name: Delete branch, PR and tag in case of failure or cancel
      if: failure() || cancelled()
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.GH_TOKEN }}
      run: |
        src="${{ env.SCRIPT_PATH }}/delete_branch_pr_tag.sh"
        chmod +x "$src"
        $src "${{ github.ref_name }}" "${{ env.BRANCH_NEW }}"

#    - name: Set summary data
#      id: set_summary
#      if: ${{ always() }}
#      shell: bash
#      run: echo "summary_data=${GITHUB_STEP_SUMMARY}" >> $GITHUB_OUTPUT

# FIXME error Unrecognized named-value: 'inputs'.
# Located at position 1 within expression: inputs.REPOSITORY  
#    - name: Generate summary report 
#      if: ${{ always() }}
#      # needs: bump_my_version
#      uses: ${{ inputs.REPOSITORY }}/.github/workflows/summarize-jobs-reusable.yaml@${{ github.ref_name }}
#      with:
#        branch_to_summarize: ${{ env.BRANCH_NEW }}
#        summary_data: ${{ steps.set_summary.outputs.summary_data }}

branding:
  icon: "file-text"
  color: "white"
...
